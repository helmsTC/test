import numpy as np
import open3d as o3d
import os

def load_point_cloud(bin_path):
    """Load a point cloud from a binary .bin file."""
    pc = np.fromfile(bin_path, dtype=np.float32).reshape(-1, 4)  # x, y, z, intensity
    return pc[:, :3]  # Only use x, y, z

def load_labels(label_path):
    """Load labels from a .label file."""
    labels = np.fromfile(label_path, dtype=np.uint32)
    return labels & 0xFFFF  # Semantic labels (first 16 bits)

def visualize_point_cloud(pc, labels=None):
    """Visualize the point cloud with Open3D."""
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(pc)
    
    if labels is not None:
        # Assign colors based on labels
        unique_labels = np.unique(labels)
        colors = np.random.rand(len(unique_labels), 3)  # Random color for each label
        label_to_color = {label: colors[i] for i, label in enumerate(unique_labels)}
        color_array = np.array([label_to_color[label] for label in labels])
        pcd.colors = o3d.utility.Vector3dVector(color_array)

    # Visualize with Open3D
    o3d.visualization.draw_geometries([pcd])

def main(dataset_path, sequence="00"):
    sequence_path = os.path.join(dataset_path, "sequences", sequence)
    velodyne_path = os.path.join(sequence_path, "velodyne")
    label_path = os.path.join(sequence_path, "labels")
    
    # List files in the sequence
    bin_files = sorted(os.listdir(velodyne_path))
    label_files = sorted(os.listdir(label_path)) if os.path.exists(label_path) else None

    for i, bin_file in enumerate(bin_files):
        bin_path = os.path.join(velodyne_path, bin_file)
        pc = load_point_cloud(bin_path)
        
        labels = None
        if label_files:
            label_path = os.path.join(label_path, label_files[i])
            labels = load_labels(label_path)
        
        print(f"Visualizing frame {i + 1}/{len(bin_files)}: {bin_file}")
        visualize_point_cloud(pc, labels)

if __name__ == "__main__":
    dataset_path = "path/to/your/dataset"
    main(dataset_path)
