import numpy as np
import open3d as o3d
import os

# Custom label-to-color mapping
CUSTOM_LABEL_COLORS = {
    1: [245, 150, 100],   # Containers
    2: [255, 0, 0],       # Road
    3: [30, 30, 255],     # Person
    4: [255, 255, 0],     # Crane
    5: [0, 255, 0],       # Hangar
    6: [200, 200, 200],   # Short Tower
    7: [150, 0, 150],     # Large Tower
    8: [0, 255, 255],     # Slender Tower
    9: [255, 128, 0],     # Construction Tower
    10: [0, 128, 0],      # Terrain
    11: [128, 128, 128],  # Storage Bin
    12: [0, 0, 128],      # Veer Right Sign
    13: [128, 0, 0],      # Do Not Enter Sign
    14: [128, 128, 0],    # Speed Limit 15 Sign
    15: [0, 128, 128],    # Road Closed Sign
    16: [255, 0, 255],    # Stop Sign
    17: [150, 75, 0],     # Car
    18: [255, 192, 203],  # Person-Adult
    19: [255, 223, 186],  # Person-Child
}

def load_point_cloud(bin_path):
    """Load a point cloud from a binary .bin file."""
    pc = np.fromfile(bin_path, dtype=np.float32).reshape(-1, 4)  # x, y, z, intensity
    return pc[:, :3]  # Only use x, y, z

def load_labels(label_path):
    """Load labels from a .label file."""
    labels = np.fromfile(label_path, dtype=np.uint32)
    return labels & 0xFFFF  # Semantic labels (first 16 bits)

def visualize_point_cloud(pc, labels=None):
    """Visualize the point cloud with Open3D."""
    pcd = o3d.geometry.PointCloud()
    pcd.points = o3d.utility.Vector3dVector(pc)
    
    if labels is not None:
        # Assign colors based on custom label-to-color mapping
        colors = np.zeros((pc.shape[0], 3))  # Default black for unlabeled points
        for label, rgb in CUSTOM_LABEL_COLORS.items():
            mask = labels == label
            colors[mask] = np.array(rgb) / 255.0  # Normalize RGB values to [0, 1]
        pcd.colors = o3d.utility.Vector3dVector(colors)
    
    # Visualize with Open3D
    o3d.visualization.draw_geometries([pcd])

def main(dataset_path, sequence="00"):
    sequence_path = os.path.join(dataset_path, "sequences", sequence)
    velodyne_path = os.path.join(sequence_path, "velodyne")
    label_path = os.path.join(sequence_path, "labels")
    
    # List files in the sequence
    bin_files = sorted(os.listdir(velodyne_path))
    label_files = sorted(os.listdir(label_path)) if os.path.exists(label_path) else None

    for i, bin_file in enumerate(bin_files):
        bin_path = os.path.join(velodyne_path, bin_file)
        pc = load_point_cloud(bin_path)
        
        labels = None
        if label_files:
            label_file = os.path.join(label_path, bin_file.replace(".bin", ".label"))
            if os.path.exists(label_file):
                labels = load_labels(label_file)
            else:
                print(f"Warning: Label file {label_file} not found. Skipping labels for this frame.")
        
        print(f"Visualizing frame {i + 1}/{len(bin_files)}: {bin_file}")
        visualize_point_cloud(pc, labels)

if __name__ == "__main__":
    dataset_path = "path/to/your/dataset"
    main(dataset_path)
