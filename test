label_dir = os.path.join(output_folder, "labels")
calib_dir = os.path.join(output_folder, "calib")

os.makedirs(velodyne_dir, exist_ok=True)
os.makedirs(image_2_dir, exist_ok=True)
os.makedirs(label_dir, exist_ok=True)
os.makedirs(calib_dir, exist_ok=True)

def convert_ply_to_bin(ply_file, bin_file):
    # Read the .ply file using Open3D
    pcd = o3d.io.read_point_cloud(ply_file)
    points = np.asarray(pcd.points)

    # Write to .bin file (SemanticKITTI format: each point has x, y, z, intensity)
    intensity = np.zeros((points.shape[0], 1))  # Dummy intensity values
    points_with_intensity = np.hstack((points, intensity)).astype(np.float32)
    points_with_intensity.tofile(bin_file)

def create_calib_file(output_dir, seq_num):
    # Replace with your actual calibration values
    calib_content = """
P0: 960.0 0.0 960.0 0.0 0.0 540.0 0.0 0.0 0.0 0.0 1.0 0.0
P1: 960.0 0.0 960.0 0.0 0.0 540.0 0.0 0.0 0.0 0.0 1.0 0.0
P2: 960.0 0.0 960.0 0.0 0.0 540.0 0.0 0.0 0.0 0.0 1.0 0.0
P3: 960.0 0.0 960.0 0.0 0.0 540.0 0.0 0.0 0.0 0.0 1.0 0.0
Tr_velo_to_cam: 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
Tr_imu_to_velo: 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
"""
    calib_file_path = os.path.join(output_dir, f"{seq_num:06d}.txt")
    with open(calib_file_path, 'w') as f:
        f.write(calib_content.strip())

# List the .ply and .png files
cloud_files = sorted([f for f in os.listdir(cloud_folder) if f.endswith('.ply')])
image_files = sorted([f for f in os.listdir(image_folder) if f.endswith('.png')])

# Ensure both directories have the same number of files
assert len(cloud_files) == len(image_files), "Mismatch in the number of cloud and image files!"

for i, (cloud_file, image_file) in enumerate(zip(cloud_files, image_files)):
    # Process each .ply and corresponding .png file
    ply_file_path = os.path.join(cloud_folder, cloud_file)
    bin_file_path = os.path.join(velodyne_dir, f"{i:06d}.bin")
    convert_ply_to_bin(ply_file_path, bin_file_path)

    # Process the corresponding image
    image_file_path = os.path.join(image_folder, image_file)
    image_output = os.path.join(image_2_dir, f"{i:06d}.png")
    img = Image.open(image_file_path)
    img.save(image_output)

    # Create a dummy label file (for compatibility)
    label_output = os.path.join(label_dir, f"{i:06d}.label")
    dummy_label = np.zeros((len(np.asarray(o3d.io.read_point_cloud(ply_file_path).points)),), dtype=np.uint32)
    dummy_label.tofile(label_output)

    # Create a calibration file
    create_calib_file(calib_dir, i)

print("Conversion completed with calibration files!")
